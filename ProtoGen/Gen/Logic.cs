// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/logic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace pb {

  /// <summary>Holder for reflection information generated from Proto/logic.proto</summary>
  public static partial class LogicReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/logic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LogicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90by9sb2dpYy5wcm90byIxCgxDMlNfTG9naW5Nc2cSDwoHYWNjb3Vu",
            "dBgBIAEoDBIQCghwYXNzd29yZBgCIAEoDCJECgxTMkNfTG9naW5Nc2cSIgoJ",
            "ZXJyb3JDb2RlGAEgASgOMg8uTG9naWNFcnJvckNvZGUSEAoIcGxheWVySWQY",
            "AiABKA0iJQoRQzJTX0NyZWF0ZVJvb21Nc2cSEAoIcGxheWVySWQYASABKA0i",
            "RwoRUzJDX0NyZWF0ZVJvb21Nc2cSIgoJZXJyb3JDb2RlGAEgASgOMg8uTG9n",
            "aWNFcnJvckNvZGUSDgoGcm9vbUlkGAIgASgNIjMKD0MyU19Kb2luUm9vbU1z",
            "ZxIOCgZyb29tSWQYASABKA0SEAoIcGxheWVySWQYAiABKA0iUgoPUzJDX0pv",
            "aW5Sb29tTXNnEiIKCWVycm9yQ29kZRgBIAEoDjIPLkxvZ2ljRXJyb3JDb2Rl",
            "Eg4KBnJvb21JZBgCIAEoDRILCgNhbGwYAyADKA0iSwoVUzJDX0xvZ2ljRXhj",
            "ZXB0aW9uTXNnEiIKCWVycm9yQ29kZRgBIAEoDjIPLkxvZ2ljRXJyb3JDb2Rl",
            "Eg4KBnJlYXNvbhgCIAEoCSqBAQoKTG9naWNNc2dJRBITCg9MT0dJQ19NU0df",
            "QmVnaW4QABITCg9MT0dJQ19NU0dfTG9naW4QARIYChRMT0dJQ19NU0dfQ3Jl",
            "YXRlUm9vbRACEhYKEkxPR0lDX01TR19Kb2luUm9vbRADEhcKE0xPR0lDX01T",
            "R19FeGNlcHRpb24QZCpmCg5Mb2dpY0Vycm9yQ29kZRIQCgxMT0dJQ19FUlJf",
            "T2sQABIVChFMT0dJQ19FUlJfQWNjb3VudBABEhQKEExPR0lDX0VSUl9Ob1Jv",
            "b20QAhIVChFMT0dJQ19FUlJfSGFzUm9vbRADQgWqAgJwYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::pb.LogicMsgID), typeof(global::pb.LogicErrorCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.C2S_LoginMsg), global::pb.C2S_LoginMsg.Parser, new[]{ "Account", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.S2C_LoginMsg), global::pb.S2C_LoginMsg.Parser, new[]{ "ErrorCode", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.C2S_CreateRoomMsg), global::pb.C2S_CreateRoomMsg.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.S2C_CreateRoomMsg), global::pb.S2C_CreateRoomMsg.Parser, new[]{ "ErrorCode", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.C2S_JoinRoomMsg), global::pb.C2S_JoinRoomMsg.Parser, new[]{ "RoomId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.S2C_JoinRoomMsg), global::pb.S2C_JoinRoomMsg.Parser, new[]{ "ErrorCode", "RoomId", "All" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.S2C_LogicExceptionMsg), global::pb.S2C_LogicExceptionMsg.Parser, new[]{ "ErrorCode", "Reason" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 消息ID
  /// </summary>
  public enum LogicMsgID {
    [pbr::OriginalName("LOGIC_MSG_Begin")] LogicMsgBegin = 0,
    /// <summary>
    ///登录
    /// </summary>
    [pbr::OriginalName("LOGIC_MSG_Login")] LogicMsgLogin = 1,
    /// <summary>
    ///创建房间
    /// </summary>
    [pbr::OriginalName("LOGIC_MSG_CreateRoom")] LogicMsgCreateRoom = 2,
    /// <summary>
    ///进入房间
    /// </summary>
    [pbr::OriginalName("LOGIC_MSG_JoinRoom")] LogicMsgJoinRoom = 3,
    /// <summary>
    ///意外错误
    /// </summary>
    [pbr::OriginalName("LOGIC_MSG_Exception")] LogicMsgException = 100,
  }

  /// <summary>
  /// 错误码
  /// </summary>
  public enum LogicErrorCode {
    /// <summary>
    ///OK
    /// </summary>
    [pbr::OriginalName("LOGIC_ERR_Ok")] LogicErrOk = 0,
    /// <summary>
    ///账户信息错误
    /// </summary>
    [pbr::OriginalName("LOGIC_ERR_Account")] LogicErrAccount = 1,
    /// <summary>
    ///没有这个房间
    /// </summary>
    [pbr::OriginalName("LOGIC_ERR_NoRoom")] LogicErrNoRoom = 2,
    /// <summary>
    ///已存在这个房间
    /// </summary>
    [pbr::OriginalName("LOGIC_ERR_HasRoom")] LogicErrHasRoom = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 登录
  /// </summary>
  public sealed partial class C2S_LoginMsg : pb::IMessage<C2S_LoginMsg> {
    private static readonly pb::MessageParser<C2S_LoginMsg> _parser = new pb::MessageParser<C2S_LoginMsg>(() => new C2S_LoginMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LoginMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginMsg(C2S_LoginMsg other) : this() {
      account_ = other.account_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginMsg Clone() {
      return new C2S_LoginMsg(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private pb::ByteString password_ = pb::ByteString.Empty;
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LoginMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LoginMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LoginMsg other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadBytes();
            break;
          }
          case 18: {
            Password = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录
  /// </summary>
  public sealed partial class S2C_LoginMsg : pb::IMessage<S2C_LoginMsg> {
    private static readonly pb::MessageParser<S2C_LoginMsg> _parser = new pb::MessageParser<S2C_LoginMsg>(() => new S2C_LoginMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LoginMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginMsg(S2C_LoginMsg other) : this() {
      errorCode_ = other.errorCode_;
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginMsg Clone() {
      return new S2C_LoginMsg(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::pb.LogicErrorCode errorCode_ = 0;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::pb.LogicErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private uint playerId_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LoginMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LoginMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LoginMsg other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            errorCode_ = (global::pb.LogicErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建房间
  /// </summary>
  public sealed partial class C2S_CreateRoomMsg : pb::IMessage<C2S_CreateRoomMsg> {
    private static readonly pb::MessageParser<C2S_CreateRoomMsg> _parser = new pb::MessageParser<C2S_CreateRoomMsg>(() => new C2S_CreateRoomMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CreateRoomMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoomMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoomMsg(C2S_CreateRoomMsg other) : this() {
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CreateRoomMsg Clone() {
      return new C2S_CreateRoomMsg(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private uint playerId_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CreateRoomMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CreateRoomMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CreateRoomMsg other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建房间
  /// </summary>
  public sealed partial class S2C_CreateRoomMsg : pb::IMessage<S2C_CreateRoomMsg> {
    private static readonly pb::MessageParser<S2C_CreateRoomMsg> _parser = new pb::MessageParser<S2C_CreateRoomMsg>(() => new S2C_CreateRoomMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_CreateRoomMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRoomMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRoomMsg(S2C_CreateRoomMsg other) : this() {
      errorCode_ = other.errorCode_;
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_CreateRoomMsg Clone() {
      return new S2C_CreateRoomMsg(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::pb.LogicErrorCode errorCode_ = 0;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::pb.LogicErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private uint roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_CreateRoomMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_CreateRoomMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_CreateRoomMsg other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            errorCode_ = (global::pb.LogicErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入房间
  /// </summary>
  public sealed partial class C2S_JoinRoomMsg : pb::IMessage<C2S_JoinRoomMsg> {
    private static readonly pb::MessageParser<C2S_JoinRoomMsg> _parser = new pb::MessageParser<C2S_JoinRoomMsg>(() => new C2S_JoinRoomMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_JoinRoomMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoomMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoomMsg(C2S_JoinRoomMsg other) : this() {
      roomId_ = other.roomId_;
      playerId_ = other.playerId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_JoinRoomMsg Clone() {
      return new C2S_JoinRoomMsg(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private uint playerId_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_JoinRoomMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_JoinRoomMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PlayerId != other.PlayerId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_JoinRoomMsg other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入房间
  /// </summary>
  public sealed partial class S2C_JoinRoomMsg : pb::IMessage<S2C_JoinRoomMsg> {
    private static readonly pb::MessageParser<S2C_JoinRoomMsg> _parser = new pb::MessageParser<S2C_JoinRoomMsg>(() => new S2C_JoinRoomMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_JoinRoomMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRoomMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRoomMsg(S2C_JoinRoomMsg other) : this() {
      errorCode_ = other.errorCode_;
      roomId_ = other.roomId_;
      all_ = other.all_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRoomMsg Clone() {
      return new S2C_JoinRoomMsg(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::pb.LogicErrorCode errorCode_ = 0;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::pb.LogicErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private uint roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_all_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> all_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///所有玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> All {
      get { return all_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_JoinRoomMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_JoinRoomMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (RoomId != other.RoomId) return false;
      if(!all_.Equals(other.all_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      hash ^= all_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomId);
      }
      all_.WriteTo(output, _repeated_all_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      size += all_.CalculateSize(_repeated_all_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_JoinRoomMsg other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      all_.Add(other.all_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            errorCode_ = (global::pb.LogicErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 异常
  /// </summary>
  public sealed partial class S2C_LogicExceptionMsg : pb::IMessage<S2C_LogicExceptionMsg> {
    private static readonly pb::MessageParser<S2C_LogicExceptionMsg> _parser = new pb::MessageParser<S2C_LogicExceptionMsg>(() => new S2C_LogicExceptionMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LogicExceptionMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.LogicReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LogicExceptionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LogicExceptionMsg(S2C_LogicExceptionMsg other) : this() {
      errorCode_ = other.errorCode_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LogicExceptionMsg Clone() {
      return new S2C_LogicExceptionMsg(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::pb.LogicErrorCode errorCode_ = 0;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::pb.LogicErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    /// <summary>
    ///原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LogicExceptionMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LogicExceptionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LogicExceptionMsg other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            errorCode_ = (global::pb.LogicErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
